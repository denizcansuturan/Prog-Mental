{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": false
   },
   "source": [
    "# UFCFVQ-15-M Programming for Data Science (Autumn 2023)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Student Id: 23020764"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": false
   },
   "source": [
    "# Programming Task 1"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": false
   },
   "source": [
    "### Requirement FR1 - Develop a function to read a single column from a CSV file"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "deletable": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "cancer\n",
      "['70', '70', '68', '53', '75', '69', '70', '63', '73', '66', '70', '63', '68', '69', '72', '65', '69', '61', '68', '67', '68', '65', '65', '68', '64', '63', '68', '69', '61', '72', '63', '75', '67', '72', '63', '69', '73', '70', '69', '73', '69', '73', '65', '70', '64', '64', '63', '68', '70', '70', '70', '62', '81', '69', '72', '69', '66', '67', '70', '84', '65', '65', '63', '81', '65', '67', '66', '67', '61', '76', '66', '70', '67', '70', '73', '63', '62', '82', '75', '65', '74', '68', '81', '76', '57', '65', '62', '64', '65', '63', '69', '65', '100', '65', '62', '66', '64', '61', '64', '60', '55', '64', '57', '63', '59', '66', '68', '70', '70', '51', '58', '57', '55', '68', '67', '72', '67', '58', '61', '60', '58', '67', '68', '66', '62', '59', '66', '64', '60', '63', '65', '55', '56', '63', '59', '60', '65', '73', '65', '65', '61', '64', '65', '63', '70', '59', '67', '68', '66', '64', '64', '65', '68', '57', '68', '65', '64', '66', '72', '68', '67', '64', '67', '57', '59', '52', '63', '58', '47', '58', '61', '64', '62', '60', '65', '58', '57', '64', '49', '59', '59', '59', '67', '59', '55', '57', '57', '65', '61', '58', '59', '61', '61', '59', '64', '56', '58', '59', '64', '57', '56', '60', '61', '57', '59', '53', '59', '56', '58', '63']\n"
     ]
    }
   ],
   "source": [
    "def read_single_column_csv(file_name, column_number):\n",
    "    \"\"\"\n",
    "    Reads a single column from a CSV file\n",
    "    \n",
    "    Parameters:\n",
    "    - file_name (str): the name of the CSV file\n",
    "    - column_number (int): the index of the chosen column  \n",
    "    \n",
    "    Returns:\n",
    "    - str: the column name from the header\n",
    "    - list: the list containing the data from specified column\n",
    "    \n",
    "    \"\"\"\n",
    "    # Ensure to give appropriate errors to foreseen problems that may arise from user mistake.    \n",
    "    if column_number < 0:\n",
    "        raise ValueError(\"Column number must be equal or greater than 0\")\n",
    "    \n",
    "    # Identify empty variables to store the column name and data\n",
    "    column_name = None\n",
    "    column_data = []\n",
    "    \n",
    "    # Open the CSV file\n",
    "    with open(file_name, 'r', encoding='utf-8-sig') as file:\n",
    "        \n",
    "        # Read the header, the first row, to extract the column names\n",
    "        header = file.readline().strip()\n",
    "        # Remove BOM if exists\n",
    "        header = header.lstrip('\\ufeff')\n",
    "        column_names = header.split(',')\n",
    "    \n",
    "        # Check if the specifies column number is valid for the dataset or not\n",
    "        if column_number >= len(column_names):\n",
    "            raise ValueError(\"Column number is not in the range of columns for this dataset\")\n",
    "    \n",
    "        # Set the first return a.k.a the column name\n",
    "        column_name = column_names[column_number]\n",
    "        \n",
    "        # Go through every row\n",
    "        for line in file:\n",
    "            columns = line.strip().split(',')\n",
    "            # Append the data from corresponding column to the list\n",
    "            if column_number < len(column_names):\n",
    "                column_data.append(columns[column_number])\n",
    "    return column_name, column_data \n",
    "\n",
    "\n",
    "# to check, assuming this jupiter file and csv file is in the same folder:\n",
    "\n",
    "file_name, column_number = \"task1.csv\", 0\n",
    "\n",
    "column_name, column_data = read_single_column_csv(file_name, column_number)\n",
    "print(column_name)\n",
    "print(column_data)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": false
   },
   "source": [
    "### Requirement FR2 - Develop a function to read CSV data from a file into memory"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "deletable": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'cancer': ['70', '70', '68', '53', '75', '69', '70', '63', '73', '66', '70', '63', '68', '69', '72', '65', '69', '61', '68', '67', '68', '65', '65', '68', '64', '63', '68', '69', '61', '72', '63', '75', '67', '72', '63', '69', '73', '70', '69', '73', '69', '73', '65', '70', '64', '64', '63', '68', '70', '70', '70', '62', '81', '69', '72', '69', '66', '67', '70', '84', '65', '65', '63', '81', '65', '67', '66', '67', '61', '76', '66', '70', '67', '70', '73', '63', '62', '82', '75', '65', '74', '68', '81', '76', '57', '65', '62', '64', '65', '63', '69', '65', '100', '65', '62', '66', '64', '61', '64', '60', '55', '64', '57', '63', '59', '66', '68', '70', '70', '51', '58', '57', '55', '68', '67', '72', '67', '58', '61', '60', '58', '67', '68', '66', '62', '59', '66', '64', '60', '63', '65', '55', '56', '63', '59', '60', '65', '73', '65', '65', '61', '64', '65', '63', '70', '59', '67', '68', '66', '64', '64', '65', '68', '57', '68', '65', '64', '66', '72', '68', '67', '64', '67', '57', '59', '52', '63', '58', '47', '58', '61', '64', '62', '60', '65', '58', '57', '64', '49', '59', '59', '59', '67', '59', '55', '57', '57', '65', '61', '58', '59', '61', '61', '59', '64', '56', '58', '59', '64', '57', '56', '60', '61', '57', '59', '53', '59', '56', '58', '63'], 'cardiovascular': ['37', '34', '24', '38', '35', '38', '37', '32', '35', '36', '35', '31', '42', '47', '32', '30', '34', '30', '39', '35', '50', '40', '50', '30', '37', '50', '33', '39', '40', '39', '43', '39', '24', '36', '43', '34', '23', '33', '29', '40', '30', '29', '32', '42', '44', '41', '41', '35', '33', '29', '34', '56', '22', '34', '24', '37', '52', '24', '29', '34', '40', '52', '35', '41', '13', '38', '31', '30', '30', '35', '45', '44', '27', '43', '28', '35', '36', '0', '55', '41', '73', '16', '38', '28', '30', '32', '25', '41', '35', '24', '33', '28', '70', '48', '37', '44', '38', '35', '29', '46', '35', '39', '41', '31', '23', '44', '64', '33', '50', '25', '34', '30', '37', '42', '49', '82', '77', '36', '78', '47', '42', '45', '56', '36', '32', '36', '27', '39', '31', '29', '36', '32', '32', '28', '25', '29', '47', '34', '29', '38', '33', '44', '39', '22', '40', '45', '33', '78', '31', '46', '46', '30', '100', '51', '44', '43', '31', '37', '47', '36', '32', '34', '31', '19', '28', '14', '31', '0', '44', '28', '28', '46', '25', '31', '31', '28', '31', '26', '33', '28', '27', '52', '10', '27', '31', '57', '19', '27', '29', '0', '44', '31', '35', '33', '27', '29', '25', '30', '23', '22', '31', '26', '37', '27', '31', '24', '29', '42', '38', '33'], 'stroke': ['83', '53', '71', '62', '61', '66', '58', '71', '73', '67', '65', '54', '65', '79', '65', '62', '73', '64', '71', '76', '75', '59', '74', '75', '62', '69', '70', '63', '53', '74', '75', '84', '66', '63', '67', '63', '73', '95', '62', '69', '87', '73', '64', '64', '67', '84', '74', '67', '70', '69', '83', '71', '88', '95', '88', '67', '67', '71', '69', '81', '64', '68', '72', '89', '65', '68', '69', '78', '70', '77', '77', '75', '74', '84', '73', '83', '59', '84', '76', '69', '85', '72', '79', '81', '63', '58', '70', '75', '67', '84', '66', '63', '88', '77', '68', '66', '64', '59', '79', '72', '55', '75', '65', '57', '74', '78', '81', '73', '84', '56', '67', '54', '49', '72', '75', '84', '68', '57', '74', '86', '79', '90', '68', '70', '64', '65', '69', '78', '77', '71', '74', '73', '68', '67', '65', '61', '70', '73', '96', '70', '62', '70', '76', '82', '73', '74', '80', '73', '80', '90', '83', '83', '76', '67', '72', '74', '64', '86', '77', '84', '79', '81', '74', '80', '67', '72', '86', '100', '48', '59', '61', '64', '79', '79', '78', '70', '78', '59', '71', '73', '70', '53', '75', '93', '68', '55', '74', '64', '65', '0', '58', '75', '76', '55', '70', '53', '60', '69', '77', '63', '62', '81', '57', '55', '55', '60', '64', '61', '76', '77'], 'depression': ['64', '56', '69', '46', '62', '61', '62', '60', '65', '69', '64', '54', '60', '72', '66', '62', '72', '56', '60', '58', '61', '63', '61', '72', '54', '62', '66', '66', '45', '61', '60', '67', '65', '65', '51', '61', '71', '72', '61', '53', '66', '69', '63', '73', '59', '62', '69', '71', '54', '70', '58', '71', '100', '68', '73', '62', '67', '60', '74', '82', '61', '55', '69', '74', '72', '65', '63', '71', '58', '50', '66', '72', '60', '58', '72', '73', '70', '85', '66', '67', '60', '82', '62', '68', '60', '59', '65', '65', '71', '66', '61', '65', '72', '65', '66', '65', '62', '53', '66', '57', '52', '76', '64', '58', '65', '56', '61', '76', '64', '53', '62', '54', '55', '67', '68', '58', '54', '57', '63', '65', '63', '49', '66', '71', '61', '64', '58', '50', '69', '64', '60', '54', '64', '60', '61', '57', '64', '68', '74', '63', '63', '68', '53', '58', '65', '61', '66', '59', '71', '69', '63', '61', '60', '60', '72', '62', '64', '69', '71', '75', '62', '79', '35', '59', '54', '58', '55', '59', '59', '54', '68', '59', '70', '53', '71', '58', '74', '59', '65', '63', '59', '67', '64', '66', '66', '60', '61', '63', '64', '0', '60', '59', '67', '58', '52', '52', '62', '60', '63', '56', '58', '59', '59', '66', '52', '59', '55', '68', '63', '61'], 'rehab': ['56', '53', '44', '60', '75', '57', '72', '47', '72', '43', '52', '43', '56', '54', '61', '48', '60', '50', '68', '46', '58', '55', '56', '63', '48', '52', '51', '49', '47', '82', '58', '55', '54', '76', '62', '49', '58', '57', '45', '71', '45', '61', '44', '73', '47', '53', '47', '57', '77', '45', '53', '63', '66', '55', '56', '45', '47', '65', '50', '51', '51', '87', '44', '61', '42', '65', '59', '65', '48', '57', '84', '51', '53', '54', '72', '44', '26', '45', '64', '39', '72', '77', '56', '46', '51', '45', '60', '57', '47', '61', '59', '45', '37', '62', '36', '57', '43', '40', '58', '55', '50', '38', '45', '76', '72', '71', '79', '35', '68', '51', '48', '51', '43', '38', '45', '76', '62', '53', '55', '58', '84', '97', '48', '61', '48', '56', '60', '64', '62', '37', '66', '100', '92', '38', '74', '77', '68', '40', '41', '50', '42', '44', '61', '36', '69', '51', '90', '79', '34', '45', '54', '65', '53', '60', '42', '70', '51', '41', '46', '70', '75', '26', '38', '28', '39', '19', '53', '32', '29', '47', '68', '61', '46', '33', '50', '65', '40', '80', '31', '45', '55', '39', '58', '42', '50', '36', '43', '49', '45', '0', '26', '40', '43', '37', '40', '28', '34', '43', '40', '42', '44', '39', '37', '28', '52', '28', '36', '36', '59', '43'], 'vaccine': ['76', '79', '77', '47', '84', '73', '76', '66', '86', '62', '71', '79', '79', '76', '70', '74', '85', '63', '70', '76', '67', '77', '63', '90', '65', '54', '73', '78', '60', '74', '78', '91', '76', '87', '60', '74', '70', '88', '76', '70', '72', '77', '72', '79', '75', '72', '69', '74', '69', '99', '74', '87', '80', '82', '80', '80', '71', '72', '78', '85', '80', '69', '70', '80', '71', '88', '68', '84', '55', '62', '80', '88', '70', '70', '83', '77', '83', '63', '91', '70', '100', '79', '90', '70', '64', '69', '73', '81', '81', '68', '73', '64', '98', '61', '80', '74', '67', '74', '67', '62', '64', '74', '92', '69', '71', '58', '65', '91', '72', '67', '85', '76', '60', '76', '71', '66', '58', '71', '64', '58', '47', '44', '74', '67', '74', '79', '73', '56', '70', '74', '78', '71', '80', '83', '73', '61', '62', '79', '78', '76', '80', '62', '64', '64', '65', '61', '69', '64', '83', '76', '74', '52', '70', '66', '64', '63', '65', '76', '89', '78', '68', '95', '59', '85', '78', '76', '56', '83', '53', '71', '73', '72', '78', '85', '87', '70', '77', '75', '68', '88', '69', '70', '91', '70', '68', '65', '68', '78', '71', '0', '61', '80', '84', '65', '56', '69', '78', '74', '76', '80', '67', '77', '80', '72', '60', '76', '75', '61', '89', '85'], 'diarrhea': ['66', '56', '78', '53', '69', '70', '58', '70', '79', '73', '73', '55', '66', '76', '74', '74', '75', '65', '69', '69', '69', '68', '68', '68', '65', '73', '81', '74', '46', '77', '68', '89', '72', '65', '65', '76', '84', '67', '72', '69', '75', '91', '80', '72', '69', '74', '69', '80', '65', '87', '67', '69', '75', '75', '100', '72', '63', '85', '94', '90', '65', '70', '72', '94', '83', '77', '72', '69', '69', '64', '76', '82', '82', '79', '83', '79', '61', '95', '66', '74', '67', '90', '98', '88', '81', '66', '82', '81', '77', '78', '72', '76', '87', '79', '66', '71', '68', '61', '80', '70', '61', '68', '75', '76', '84', '81', '70', '87', '89', '77', '84', '63', '62', '77', '72', '80', '65', '71', '72', '76', '94', '68', '76', '83', '77', '75', '77', '71', '85', '74', '76', '74', '77', '73', '78', '59', '69', '72', '69', '72', '70', '79', '72', '81', '86', '71', '74', '73', '71', '76', '80', '86', '75', '68', '91', '70', '71', '80', '75', '78', '97', '80', '80', '67', '63', '80', '66', '70', '59', '66', '77', '70', '66', '92', '65', '68', '65', '85', '75', '64', '66', '66', '69', '75', '69', '71', '66', '73', '68', '0', '77', '65', '61', '61', '78', '50', '72', '68', '66', '63', '59', '55', '61', '51', '65', '56', '66', '73', '70', '75'], 'obesity': ['47', '52', '61', '41', '56', '45', '58', '44', '52', '49', '51', '59', '67', '63', '52', '49', '57', '47', '52', '45', '61', '48', '62', '59', '48', '47', '58', '58', '49', '52', '54', '50', '48', '62', '41', '49', '45', '78', '58', '45', '48', '67', '49', '72', '52', '58', '73', '57', '49', '46', '54', '63', '58', '43', '43', '62', '56', '41', '37', '61', '58', '47', '51', '58', '43', '45', '48', '69', '42', '42', '62', '65', '49', '39', '50', '54', '82', '0', '77', '53', '94', '42', '50', '44', '42', '49', '52', '86', '61', '50', '48', '37', '100', '38', '53', '50', '56', '44', '45', '50', '39', '60', '81', '0', '45', '45', '49', '62', '54', '32', '38', '43', '56', '72', '52', '53', '49', '44', '41', '39', '37', '86', '77', '51', '49', '66', '51', '29', '31', '51', '50', '53', '31', '55', '47', '52', '56', '53', '66', '49', '60', '51', '46', '47', '37', '35', '58', '52', '82', '59', '47', '51', '43', '57', '67', '72', '60', '57', '61', '66', '52', '67', '0', '50', '51', '51', '37', '0', '40', '50', '42', '50', '61', '40', '36', '54', '71', '47', '47', '46', '64', '53', '46', '45', '54', '48', '56', '55', '49', '0', '51', '86', '47', '53', '47', '45', '48', '54', '40', '46', '58', '50', '56', '64', '42', '53', '55', '63', '62', '53'], 'diabetes': ['80', '78', '72', '66', '78', '74', '74', '74', '79', '81', '75', '73', '85', '76', '76', '74', '83', '71', '80', '75', '79', '74', '83', '68', '72', '81', '80', '82', '70', '82', '80', '84', '74', '84', '73', '76', '80', '87', '72', '77', '68', '87', '83', '75', '80', '78', '83', '81', '74', '75', '75', '78', '77', '67', '85', '82', '82', '74', '73', '79', '79', '76', '72', '92', '68', '73', '73', '74', '73', '71', '80', '72', '74', '72', '75', '73', '78', '78', '82', '71', '92', '83', '89', '97', '82', '71', '70', '90', '73', '79', '75', '73', '100', '84', '75', '79', '74', '74', '77', '73', '69', '76', '79', '84', '71', '89', '81', '88', '85', '79', '73', '73', '96', '79', '84', '95', '84', '90', '65', '64', '70', '100', '78', '75', '76', '78', '77', '65', '80', '63', '81', '89', '88', '73', '80', '80', '81', '81', '85', '79', '77', '78', '72', '76', '77', '75', '80', '77', '73', '76', '81', '84', '95', '66', '79', '86', '70', '81', '87', '71', '75', '78', '56', '81', '80', '80', '83', '97', '84', '66', '73', '78', '69', '80', '81', '81', '95', '80', '69', '81', '74', '82', '93', '80', '75', '80', '72', '79', '80', '0', '78', '79', '66', '74', '81', '67', '80', '69', '79', '71', '73', '61', '76', '67', '70', '63', '76', '77', '75', '73']}\n",
      "9\n",
      "['70', '70', '68', '53', '75', '69', '70', '63', '73', '66', '70', '63', '68', '69', '72', '65', '69', '61', '68', '67', '68', '65', '65', '68', '64', '63', '68', '69', '61', '72', '63', '75', '67', '72', '63', '69', '73', '70', '69', '73', '69', '73', '65', '70', '64', '64', '63', '68', '70', '70', '70', '62', '81', '69', '72', '69', '66', '67', '70', '84', '65', '65', '63', '81', '65', '67', '66', '67', '61', '76', '66', '70', '67', '70', '73', '63', '62', '82', '75', '65', '74', '68', '81', '76', '57', '65', '62', '64', '65', '63', '69', '65', '100', '65', '62', '66', '64', '61', '64', '60', '55', '64', '57', '63', '59', '66', '68', '70', '70', '51', '58', '57', '55', '68', '67', '72', '67', '58', '61', '60', '58', '67', '68', '66', '62', '59', '66', '64', '60', '63', '65', '55', '56', '63', '59', '60', '65', '73', '65', '65', '61', '64', '65', '63', '70', '59', '67', '68', '66', '64', '64', '65', '68', '57', '68', '65', '64', '66', '72', '68', '67', '64', '67', '57', '59', '52', '63', '58', '47', '58', '61', '64', '62', '60', '65', '58', '57', '64', '49', '59', '59', '59', '67', '59', '55', '57', '57', '65', '61', '58', '59', '61', '61', '59', '64', '56', '58', '59', '64', '57', '56', '60', '61', '57', '59', '53', '59', '56', '58', '63']\n"
     ]
    }
   ],
   "source": [
    "def read_csv_to_memory_dict(file_name):\n",
    "    \"\"\"\n",
    "    Reads CSV file data into the memory as a dictionary\n",
    "    \n",
    "    Parameters:\n",
    "    - file_name (str): the name of the CSV file\n",
    "    \n",
    "    Returns:\n",
    "    - dict: a dictionary where each key is a column name and the value is the list of the column data.\n",
    "    \n",
    "    \"\"\"\n",
    "\n",
    "    # Ensure to give appropriate errors to foreseen problems that may arise from user mistake.    \n",
    "    if not file_name:\n",
    "        raise ValueError(\"Please provide the file name\")    \n",
    "\n",
    "    try:\n",
    "\n",
    "        with open(file_name, 'r', encoding='utf-8-sig') as file:\n",
    "        # Identify an empty dictionary to store the column name and data\n",
    "            data_dict = {}\n",
    "            # Read the header, the first row, to extract the column names\n",
    "            header = file.readline().strip()\n",
    "            # Remove BOM if exists\n",
    "            header = header.lstrip('\\ufeff')\n",
    "            column_names = header.split(',')\n",
    "\n",
    "            # Loop to get every column\n",
    "            for column_number in range(len(column_names)):\n",
    "                # Use the pre written function to get the name and the data\n",
    "                column_name, column_data = read_single_column_csv(file_name, column_number)\n",
    "                # Add them to the dictionary but print every column in new line\n",
    "                data_dict[column_name] = column_data\n",
    "          \n",
    "            return data_dict\n",
    "    \n",
    "\n",
    "    except FileNotFoundError:\n",
    "        print(f\"File {file_name} not found, consider checking the path\")\n",
    "    except Exception as e:\n",
    "        print(f\"Error: {e}\")\n",
    "    \n",
    "# to check:\n",
    "\n",
    "file_name = \"task1.csv\"\n",
    "\n",
    "memory = read_csv_to_memory_dict(file_name)\n",
    "print(memory)\n",
    "print(len(memory))\n",
    "print(memory[\"cancer\"])        "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": false
   },
   "source": [
    "### Requirement FR3 - Develop a function to calculate the Kendall Tau Correlation Coefficient for two lists of data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "deletable": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Mine function returns: 0.2586935794614296\n",
      "Scipy built-in function returns: 0.25869\n"
     ]
    }
   ],
   "source": [
    "def kendalls_tau_b(x, y):\n",
    "    \n",
    "    concordant = discordant = ties_x = ties_y = 0\n",
    "    n = len(x)\n",
    "\n",
    "    if len(x) != len(y):\n",
    "        raise ValueError(\"The lists should be of the same length\")\n",
    "\n",
    "    # Count concordants and discordants\n",
    "    for i in range(n-1):\n",
    "        for j in range(i+1, n):\n",
    "            if x[i] == x[j] and y[i] == y[j]:\n",
    "                # Ignore pairs that are tied in both lists\n",
    "                continue\n",
    "            elif (x[i] < x[j] and y[i] < y[j]) or (x[i] > x[j] and y[i] > y[j]):\n",
    "                concordant += 1\n",
    "            elif (x[i] < x[j] and y[i] > y[j]) or (x[i] > x[j] and y[i] < y[j]):\n",
    "                discordant += 1\n",
    "            \n",
    "            # Count ties in list1\n",
    "            if x[i] == x[j]:\n",
    "                ties_x += 1\n",
    "            \n",
    "            # Count ties in list2\n",
    "            if y[i] == y[j]:\n",
    "                ties_y += 1\n",
    "    \n",
    "    # Calculate tau_b\n",
    "    P = concordant\n",
    "    Q = discordant\n",
    "    T = ties_x\n",
    "    U = ties_y\n",
    "\n",
    "    denominator = (((P + Q + T) * (P + Q + U)) ** 0.5)\n",
    "    if denominator == 0:\n",
    "        return None  # Return None if the denominator is zero to avoid division by zero error\n",
    "    \n",
    "    tau_b = (P - Q) / denominator\n",
    "\n",
    "    return tau_b\n",
    "\n",
    "\n",
    "# Example usage\n",
    "x = memory[\"cancer\"]\n",
    "y = memory[\"stroke\"]\n",
    "\n",
    "c = kendalls_tau_b(x, y)\n",
    "print(\"Mine function returns:\", c)\n",
    "\n",
    "from scipy.stats import kendalltau\n",
    "corr, _ = kendalltau(x, y)\n",
    "print('Scipy built-in function returns: %.5f' % corr)\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": false
   },
   "source": [
    "### Requirement FR4 - Develop a function to generate a set of Kendall Tau Correlation Coefficients for a data structure like the one generated in FR2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "deletable": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[('cancer', 'cardiovascular', 0.11657256050768439),\n",
       " ('cancer', 'stroke', 0.2586935794614296),\n",
       " ('cancer', 'depression', 0.23928224488351915),\n",
       " ('cancer', 'rehab', 0.2997925331933315),\n",
       " ('cancer', 'vaccine', 0.15643680998934015),\n",
       " ('cancer', 'diarrhea', 0.23149211765241354),\n",
       " ('cancer', 'obesity', 0.13440662133322778),\n",
       " ('cancer', 'diabetes', 0.17280145563866803),\n",
       " ('cardiovascular', 'stroke', 0.06397863962062682),\n",
       " ('cardiovascular', 'depression', 0.030399564597656043),\n",
       " ('cardiovascular', 'rehab', 0.1623021558178698),\n",
       " ('cardiovascular', 'vaccine', -0.09876137307999196),\n",
       " ('cardiovascular', 'diarrhea', -0.02141430756654661),\n",
       " ('cardiovascular', 'obesity', 0.17324358360959338),\n",
       " ('cardiovascular', 'diabetes', 0.11106647678610486),\n",
       " ('stroke', 'depression', 0.2465946318402626),\n",
       " ('stroke', 'rehab', 0.14352871455131197),\n",
       " ('stroke', 'vaccine', 0.0831514808975091),\n",
       " ('stroke', 'diarrhea', 0.2617003002004919),\n",
       " ('stroke', 'obesity', 0.05702361260874357),\n",
       " ('stroke', 'diabetes', 0.11457579559687346),\n",
       " ('depression', 'rehab', -0.013167708639112555),\n",
       " ('depression', 'vaccine', 0.30445256988962044),\n",
       " ('depression', 'diarrhea', 0.3007061824186466),\n",
       " ('depression', 'obesity', 0.23124896983472013),\n",
       " ('depression', 'diabetes', 0.10821237945008343),\n",
       " ('rehab', 'vaccine', -0.07794575234287396),\n",
       " ('rehab', 'diarrhea', 0.13384513228124637),\n",
       " ('rehab', 'obesity', -0.027133305925384817),\n",
       " ('rehab', 'diabetes', 0.10398277620818991),\n",
       " ('vaccine', 'diarrhea', 0.054797141131977256),\n",
       " ('vaccine', 'obesity', 0.24565623646599014),\n",
       " ('vaccine', 'diabetes', 0.09637401693887102),\n",
       " ('diarrhea', 'obesity', -0.08519867481948337),\n",
       " ('diarrhea', 'diabetes', 0.119714596503649),\n",
       " ('obesity', 'diabetes', 0.12032051987273971)]"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def set_of_kendall_tau(data):\n",
    "    \"\"\"\n",
    "    Generate Kendall Tau Rank Correlation Coefficients for every pair of columns from the previous dictionary.\n",
    "\n",
    "    Parameters:\n",
    "    data (dict): Dictionary where keys are column names, and values are lists of data.\n",
    "\n",
    "    Returns:\n",
    "    list: List of tuples containing column pairs and their associated correlation coefficient values.\n",
    "    \"\"\"\n",
    "    column_names = list(data.keys())\n",
    "    num_columns = len(column_names)\n",
    "    correlations = []\n",
    "\n",
    "    for i in range(num_columns - 1):\n",
    "        for j in range(i + 1, num_columns):\n",
    "            column1 = column_names[i]\n",
    "            column2 = column_names[j]\n",
    "            values1 = data[column1]\n",
    "            values2 = data[column2]\n",
    "\n",
    "            correlation_coefficient = kendalls_tau_b(values1, values2)\n",
    "            correlations.append((column1, column2, correlation_coefficient))\n",
    "\n",
    "    return correlations\n",
    "\n",
    "# to check\n",
    "\n",
    "set_of_kendall_tau(memory)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": false
   },
   "source": [
    "### Requirement FR5 - Develop a function to print a custom table for selected data from a data structure like the one generated in FR4"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "deletable": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "********************************************************************************\n",
      "*               *    cancer     *  depression   *   diarrhea    *    vaccine    *\n",
      "********************************************************************************\n",
      "     cancer     *       -       *     0.2393    *     0.2315    *     0.1564    *\n",
      "********************************************************************************\n",
      "   depression   *     0.2393    *       -       *     0.3007    *     0.3045    *\n",
      "********************************************************************************\n",
      "    diarrhea    *     0.2315    *     0.3007    *       -       *     0.0548    *\n",
      "********************************************************************************\n",
      "    vaccine     *     0.1564    *     0.3045    *     0.0548    *       -       *\n",
      "********************************************************************************\n"
     ]
    }
   ],
   "source": [
    "def custom_table(correlations, border_char='*', include_columns=None):\n",
    "    \"\"\"\n",
    "    Print a custom table of Kendall Tau Rank Correlation Coefficients.\n",
    "\n",
    "    Parameters:\n",
    "    correlation_results (list): List of tuples containing column pairs and their correlation coefficient values from FR4.\n",
    "    border_char (str): Border character to use for the table.\n",
    "    include_columns (list): List of column names to include in the table.\n",
    "\n",
    "    Returns:\n",
    "    None (table will be printed)\n",
    "    \"\"\"\n",
    "    if include_columns is None:\n",
    "        include_columns = [corr[0] for corr in correlations] + [corr[1] for corr in correlations]\n",
    "\n",
    "    # Get the unique column names\n",
    "    column_names = set(include_columns)\n",
    "\n",
    "    # Sort the column names alphabetically\n",
    "    sorted_column_names = sorted(column_names)\n",
    "\n",
    "    # Create a table header\n",
    "    header = border_char + ' ' * 15 + border_char + border_char.join(f\"{col:^15}\" for col in sorted_column_names) + border_char\n",
    "    separator = border_char + '*' * (15 * (len(sorted_column_names) + 1) + len(sorted_column_names) - 1) + border_char\n",
    "\n",
    "    # Print the table header\n",
    "    print(separator)\n",
    "    print(header)\n",
    "    print(separator)\n",
    "\n",
    "    # Print the table content\n",
    "    for row_label in sorted_column_names:\n",
    "        row = f\"{row_label:^16}\" + border_char\n",
    "        for col_label in sorted_column_names:\n",
    "            if row_label == col_label:\n",
    "                cell_value = \"-\".center(15)\n",
    "            else:\n",
    "                correlation_value = next(\n",
    "                    corr[2] for corr in correlations if (corr[0] == row_label and corr[1] == col_label) or\n",
    "                                                       (corr[1] == row_label and corr[0] == col_label))\n",
    "                cell_value = f\"{correlation_value: .4f}\".center(15)\n",
    "            row += cell_value + border_char\n",
    "        print(row)\n",
    "        print(separator)\n",
    "\n",
    "        \n",
    "\n",
    "# to check\n",
    "correlation_results = set_of_kendall_tau(memory)\n",
    "selected_columns  = [\"cancer\", \"vaccine\", \"diarrhea\", \"depression\"]\n",
    "custom_table(correlation_results, border_char='*', include_columns = selected_columns) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
